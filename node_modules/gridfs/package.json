{
  "name": "gridfs",
  "version": "0.0.2",
  "description": "The GridFS wrapper module for Node.js.",
  "main": "index.js",
  "scripts": {
    "test": "eslint index.js test/*.js && mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/LewisJEllis/gridfs.git"
  },
  "keywords": [
    "gridfs",
    "gridfs-stream",
    "mongo",
    "mongodb",
    "mongoose",
    "wrapper"
  ],
  "dependencies": {
    "gridfs-stream": "0.5.3"
  },
  "devDependencies": {
    "chai": "1.10.0",
    "mongodb": "1.4.x"
  },
  "author": {
    "name": "Lewis J Ellis"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/LewisJEllis/gridfs/issues"
  },
  "homepage": "https://github.com/LewisJEllis/gridfs",
  "readme": "# Gridfs\nThe GridFS wrapper module for Node.js.\n\n  [![NPM Version][npm-image]][npm-url]\n  [![Build Status][travis-image]][travis-url]\n\n```javascript\nvar mongo = require('mongodb');\nvar Grid = require('gridfs');\n\nmongo.MongoClient.connect(yourMongoURI, function(err, db) {\n  var gfs = Grid(db, mongo);\n\n  var f = gfs.fromFile({}, './example.txt');\n  console.log(f.id);\n  f.save(function (err, file) {\n    console.log('saved file');\n    gfs.readFile({_id: f.id}, function (err, data) {\n      console.log('read file: ' + data.toString());\n    });\n  });\n\n  gfs.writeFile({}, 'hello', function (err, file) {\n    console.log('wrote to ' + file._id);\n  });\n});\n\n```\n\nThis is an extension of [gridfs-stream](https://github.com/aheckmann/gridfs-stream), building on its stream interface to provide additional utility methods. As such, huge props to [@aheckmann](https://github.com/aheckmann) and the rest of the contributors to gridfs-stream.\n\nThis library is currently quite incomplete, but the plan is primarily to mirror a selection of functions from the core `fs` API.\n\n`gridfs` can be used as a drop-in replacement for `gridfs-stream`, as it exports the same object as `gridfs-stream`, just with additional methods available.\n\n# Installation\n```\nnpm install gridfs\n```\n\n# Usage\nSee the example above, and [gridfs-stream](https://github.com/aheckmann/gridfs-stream).\n\n# Methods\n```\ngfs.readFile(options, cb(err, buffer))\ngfs.writeFile(options, data, cb(err, file))\ngfs.toFile(options, target, cb(err))\ngfs.fromFile(options, source) -> {id, save(cb(err, file))}\n```\n`options` fields are the same as `options` fields in [gridfs-stream](https://github.com/aheckmann/gridfs-stream); they're just passed along to the stream constructors.\n\n`target` can be a file path or writable stream; likewise for `source`, but readable.\n\nMore thorough docs will be written once the API stabilizes and the library is more complete. The source is simple enough for anyone familiar with `gridfs-stream` to read.\n\n# Contributing\nPull requests are welcome. Guidelines: make sure `npm test` passes.\n\nYou'll need `mocha`, `eslint`, and mongo to run the tests; they use the `gridfs-mocha-test` database on the local mongo server.\n\n[npm-image]: https://img.shields.io/npm/v/gridfs.svg?style=flat\n[npm-url]: https://www.npmjs.com/package/gridfs\n[travis-image]: https://img.shields.io/travis/lewisjellis/gridfs.svg?style=flat\n[travis-url]: https://travis-ci.org/lewisjellis/gridfs\n",
  "readmeFilename": "README.md",
  "_id": "gridfs@0.0.2",
  "dist": {
    "shasum": "616acb97778eef4594816c33dc8daff16f0f5986"
  },
  "_from": "gridfs@",
  "_resolved": "https://registry.npmjs.org/gridfs/-/gridfs-0.0.2.tgz"
}
